import threading
import time
import base64
import os
import tempfile
import csv
import ctypes
import json
from datetime import datetime

from tkinter import Tk, Canvas, StringVar, BooleanVar, IntVar, filedialog, LEFT, RIGHT, Text, X, Y, Spinbox, END
from tkinter.ttk import Frame, LabelFrame, Label, Combobox, Checkbutton, Button, Scrollbar, Style, Entry
from pynput.mouse import Listener as MouseListener
import keyboard
import pygetwindow as gw
import pyautogui
import win32gui
import win32con
import win32api
import win32process

class AutoKeyBroadcaster:
    def __init__(self, root):
        self.root = root
        self.root.title("NickBox - Input Broadcaster")
        self.icon_base64 = ""
        self.icon_path = None
        self.root.withdraw()
        self.create_icon_in_background()
        self.root.geometry("500x950")
        self.root.resizable(False, False)
        self.target_window_pattern = StringVar()
        self.is_broadcasting = False
        self.is_auto_focusing = False
        self.is_auto_focusing_paused = False
        self.broadcast_thread = None
        self.hide_taskbar_var = BooleanVar(value=False)
        self.taskbar_hidden = False
        self.focus_thread = None
        self.grid_snap_enabled = BooleanVar(value=True)
        self.grid_snap_size = IntVar(value=20)
        self.window_snap_enabled = BooleanVar(value=True)
        self.corner_snap_enabled = BooleanVar(value=True)
        self.running = True
        self.broadcast_all_keys = BooleanVar(value=False)
        self.logging_enabled = BooleanVar(value=True)
        self.WM_KEYDOWN = 0x0100
        self.WM_KEYUP = 0x0101
        self.current_profile = "default"
        self.profiles_dir = "settings"
        self.profile_config_file = os.path.join(self.profiles_dir, "profile_config.json")
        self.keys_file = os.path.join(self.profiles_dir, "keys.csv")
        self.log_file = "log.txt"
        if not os.path.exists(self.profiles_dir):
            os.makedirs(self.profiles_dir)
        self.load_profile_config()
        self.load_keys()
        self.window_list = self.get_all_windows()
        self.window_rects = {}
        self.dragging_window = None
        self.resizing_window = None
        self.screen_scale = 0.1
        self.create_widgets()
        self.apply_profile_settings()
        self.root.update_idletasks()    
        self.root.after(500, self.update_window_visualization)
        self.alt_tab_pressed = False
        self.alt_tab_pause_time = 1
        self.last_alt_tab_release_time = 0
        self.alt_tab_pressed = False
        self.keyboard_listener()
        self.mouse_listener = MouseListener(on_click=self.on_mouse_click)
        self.mouse_listener.start()

    def create_icon_in_background(self):
        # Start a background thread to handle icon creation
        def _create_icon():
            try:
                icon_data = base64.b64decode(self.icon_base64)
                temp_dir = tempfile.gettempdir()
                self.icon_path = os.path.join(temp_dir, "nickbox_temp.ico")
                
                # Write the icon data to a temporary file without showing the process to the user
                with open(self.icon_path, "wb") as icon_file:
                    icon_file.write(icon_data)

                # Set the icon after it's been created
                self.root.after(0, self.set_window_icon)
            except Exception as e:
                print(f"Could not set the app icon: {e}")
        
        # Run the icon creation process in a separate thread
        icon_thread = threading.Thread(target=_create_icon)
        icon_thread.daemon = True  # Allow the thread to exit when the main program exits
        icon_thread.start()

    def set_window_icon(self):
        if self.icon_path and os.path.exists(self.icon_path):
            self.root.iconbitmap(self.icon_path)
            self.root.deiconify()
        
    def toggle_taskbar(self, hide=True):
        try:
            # Get the taskbar window handle
            taskbar_hwnd = win32gui.FindWindow("Shell_TrayWnd", None)
            if not taskbar_hwnd:
                self.log("Couldn't find taskbar window")
                return
                
            if hide and not self.taskbar_hidden:
                self.log("Hiding taskbar")
                # Hide the taskbar using ShowWindow API
                win32gui.ShowWindow(taskbar_hwnd, win32con.SW_HIDE)
                self.taskbar_hidden = True
            elif not hide and self.taskbar_hidden:
                self.log("Showing taskbar")
                # Show the taskbar
                win32gui.ShowWindow(taskbar_hwnd, win32con.SW_SHOW)
                self.taskbar_hidden = False
                
            # Also handle the secondary taskbar that may appear on other monitors
            secondary_taskbar = win32gui.FindWindow("Shell_SecondaryTrayWnd", None)
            if secondary_taskbar:
                win32gui.ShowWindow(secondary_taskbar, win32con.SW_HIDE if hide else win32con.SW_SHOW)
                
        except Exception as e:
            self.log(f"Error toggling taskbar: {str(e)}")
        
    def keyboard_listener(self):
        # Bind the Alt key press and release events
        keyboard.on_press_key('alt', self.on_alt_press)
        keyboard.on_release_key('alt', self.on_alt_release)
        keyboard.on_press_key('tab', self.on_tab_press)

    def on_alt_press(self, event):
        if self.is_auto_focusing and not self.is_auto_focusing_paused:
            if self.pause_alt_tab_var.get():
                if keyboard.is_pressed('alt') and keyboard.is_pressed('tab'):
                    self.alt_tab_pressed = True
                    self.last_alt_tab_release_time = time.time()
                    self.log("Alt+Tab detected, pausing auto focus")
                    self.is_auto_focusing_paused = True

    def on_tab_press(self, event):
        if self.is_auto_focusing and not self.is_auto_focusing_paused:
            if self.pause_alt_tab_var.get():
                if keyboard.is_pressed('alt') and keyboard.is_pressed('tab'):
                    self.alt_tab_pressed = True
                    self.last_alt_tab_release_time = time.time()
                    self.log("Alt+Tab detected, pausing auto focus")
                    self.is_auto_focusing_paused = True

    def on_alt_release(self, event):
        if self.pause_alt_tab_var.get():
            if not keyboard.is_pressed('alt') and self.alt_tab_pressed:
                self.alt_tab_pressed = False
                self.log("Alt key released, resuming auto focus")
                self.is_auto_focusing_paused = False

    def on_mouse_click(self, x, y, button, pressed):
        if button.name == 'right':
            if pressed:
                self.log("Right mouse button pressed, pausing auto focus")
                self.is_auto_focusing_paused = True
            else:
                self.log("Right mouse button released, resuming auto focus")
                self.is_auto_focusing_paused = False

    def load_profile_config(self):
        if os.path.exists(self.profile_config_file):
            try:
                with open(self.profile_config_file, 'r') as f:
                    config = json.load(f)
                    self.current_profile = config.get("default_profile", "default")
            except:
                self.current_profile = "default"
        else:
            with open(self.profile_config_file, 'w') as f:
                json.dump({"default_profile": "default"}, f)

    def save_profile_config(self, default_profile=None):
        if default_profile:
            self.current_profile = default_profile
        with open(self.profile_config_file, 'w') as f:
            json.dump({"default_profile": self.current_profile}, f)

    def get_profile_settings_file(self, profile_name="default"):
        if profile_name == "default":
            return os.path.join(self.profiles_dir, "profile_settings.json")
        else:
            return os.path.join(self.profiles_dir, f"profile{profile_name}_settings.json")

    def get_profile_keys_file(self, profile_name="default"):
        if profile_name == "default":
            return os.path.join(self.profiles_dir, "keys.csv")
        else:
            return os.path.join(self.profiles_dir, f"profile{profile_name}.txt")

    def save_profile_settings(self):
        settings_file = self.get_profile_settings_file(self.current_profile)
        settings = {
            "window_pattern": self.target_window_pattern.get(),
            "broadcast_all_keys": self.broadcast_all_keys.get(),
            "is_broadcasting": self.is_broadcasting,
            "is_auto_focusing": self.is_auto_focusing,
            "logging_enabled": self.logging_enabled.get(),
            "hide_taskbar": self.hide_taskbar_var.get(),
            "grid_snap_enabled": self.grid_snap_enabled.get(),
            "grid_snap_size": self.grid_snap_size.get(),
            "window_snap_enabled": self.window_snap_enabled.get(),
            "corner_snap_enabled": self.corner_snap_enabled.get()
        }
        with open(settings_file, 'w') as f:
            json.dump(settings, f)

    def load_profile_settings(self):
        settings_file = self.get_profile_settings_file(self.current_profile)
        if os.path.exists(settings_file):
            try:
                with open(settings_file, 'r') as f:
                    settings = json.load(f)
                    if settings.get("window_pattern"):
                        self.target_window_pattern.set(settings.get("window_pattern"))
                    self.broadcast_all_keys.set(settings.get("broadcast_all_keys", False))
                    self.is_broadcasting = settings.get("is_broadcasting", False)
                    self.is_auto_focusing = settings.get("is_auto_focusing", False)
                    self.logging_enabled.set(settings.get("logging_enabled", True))
                    self.hide_taskbar_var.set(settings.get("hide_taskbar", False))
                    self.grid_snap_enabled.set(settings.get("grid_snap_enabled", True))
                    self.grid_snap_size.set(settings.get("grid_snap_size", 20))
                    self.window_snap_enabled.set(settings.get("window_snap_enabled", True))
                    self.corner_snap_enabled.set(settings.get("corner_snap_enabled", True))

                    return True
            except:
                return False
        return False

    def apply_profile_settings(self):
        if self.load_profile_settings():
            if self.target_window_pattern.get() and self.target_window_pattern.get() in self.window_list:
                self.window_combo.set(self.target_window_pattern.get())
            else:
                self.target_window_pattern.set("")
            self.toggle_broadcast_mode()
            if self.is_broadcasting:
                self.broadcast_btn.config(text="Stop Broadcasting")
                self.broadcast_thread = threading.Thread(target=self.broadcast_keys)
                self.broadcast_thread.daemon = True
                self.broadcast_thread.start()
            if self.is_auto_focusing:
                self.focus_btn.config(text="Disable Auto Focus")
                self.focus_thread = threading.Thread(target=self.auto_focus)
                self.focus_thread.daemon = True
                self.focus_thread.start()
            if not self.logging_enabled.get():
                self.logging_checkbox.invoke()

    def load_keys(self):
        keys_file = self.get_profile_keys_file(self.current_profile)
        if not os.path.exists(keys_file):
            if not os.path.exists(self.profiles_dir):
                os.makedirs(self.profiles_dir)
            with open(keys_file, 'w', newline='') as file:
                writer = csv.writer(file)
                writer.writerow(['w', 'a', 's', 'd', '1', '2', '3', '4', '5', '6'])
            self.keys = "w,a,s,d,1,2,3,4,5,6"
        else:
            with open(keys_file, 'r') as file:
                reader = csv.reader(file)
                keys_list = next(reader, [])
                self.keys = ",".join(keys_list)

    def save_keys(self):
        sanitized_keys = self.sanitize_keys(self.keys_entry.get())
        self.keys_entry.delete(0, END)
        self.keys_entry.insert(0, sanitized_keys)
        
        keys_list = sanitized_keys.split(',')
        keys_file = self.get_profile_keys_file(self.current_profile)
        with open(keys_file, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(keys_list)
        self.log(f"Keys saved to {keys_file}")

    def load_profile(self, profile_num):
        profile_name = str(profile_num)
        profile_file = self.get_profile_keys_file(profile_name)
        if os.path.exists(profile_file) or profile_name == "default":
            was_broadcasting = self.is_broadcasting
            was_auto_focusing = self.is_auto_focusing
            if was_broadcasting:
                self.toggle_broadcasting()
            if was_auto_focusing:
                self.toggle_auto_focus()
            self.current_profile = profile_name
            self.profile_label.config(text=f"Profile: {profile_name}")
            self.load_keys_from_file()
            self.apply_profile_settings()
            self.log(f"Loaded profile {profile_name}")
        else:
            self.log(f"Profile {profile_name} does not exist")

    def save_profile(self, profile_num):
        profile_name = str(profile_num)
        self.current_profile = profile_name
        self.save_keys()
        self.save_profile_settings()
        self.profile_label.config(text=f"Profile: {profile_name}")
        self.log(f"Saved as profile {profile_name}")

    def set_default_profile(self, profile_num):
        profile_name = str(profile_num)
        profile_file = self.get_profile_keys_file(profile_name)
        if os.path.exists(profile_file) or profile_name == "default":
            self.save_profile_config(profile_name)
            self.log(f"Set profile {profile_name} as default")
        else:
            self.log(f"Profile {profile_name} does not exist")

    def get_all_windows(self):
        all_windows = []
        for window in gw.getAllWindows():
            if window.title and window.title.strip():
                all_windows.append(window.title)
        return sorted(all_windows)

    def create_widgets(self):
        # Profile Frame
        profile_frame = Frame(self.root)
        profile_frame.pack(fill="x", padx=10, pady=2)

        self.profile_label = Label(profile_frame, text=f"Profile: {self.current_profile}")
        self.profile_label.pack(side=LEFT, padx=5)

        profile_buttons_frame = Frame(profile_frame)
        profile_buttons_frame.pack(side=RIGHT)

        self.profile_num = StringVar()
        profile_combo = Combobox(profile_buttons_frame, textvariable=self.profile_num, values=list(range(1, 11)), width=2)
        profile_combo.pack(side=LEFT, padx=2)

        load_profile_btn = Button(profile_buttons_frame, text="Load", width=5,
                                      command=lambda: self.load_profile(self.profile_num.get()))
        load_profile_btn.pack(side=LEFT, padx=2)

        save_profile_btn = Button(profile_buttons_frame, text="Save", width=5,
                                      command=lambda: self.save_profile(self.profile_num.get()))
        save_profile_btn.pack(side=LEFT, padx=2)

        default_profile_btn = Button(profile_buttons_frame, text="Set Default", width=10,
                                         command=lambda: self.set_default_profile(self.profile_num.get()))
        default_profile_btn.pack(side=LEFT, padx=2)

        # Select Frame
        select_frame = LabelFrame(self.root, text="Target Window")
        select_frame.pack(fill="x", expand=True, padx=10, pady=5)

        Label(select_frame, text="Select window:").pack(anchor="w", padx=5, pady=5)
        self.window_combo = Combobox(select_frame, textvariable=self.target_window_pattern, values=self.window_list)
        self.window_combo.pack(fill="x", padx=5, pady=5)
        self.window_combo.bind("<<ComboboxSelected>>", self.on_window_selected)
        self.window_combo.bind("<Button-1>", self.refresh_window_list)

        # Placeholder for Window Management Frame
        self.window_mgmt_frame = LabelFrame(self.root, text="Window Management")
        self.window_mgmt_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # Schedule the dimension calculation
        self.root.after(100, self.setup_window_management_frame)

        self.viz_canvas = Canvas(self.window_mgmt_frame, bg="black")
        self.viz_canvas.pack(fill="both", expand=True, padx=5, pady=5)
        self.viz_canvas.bind("<Button-1>", self.start_window_drag)
        self.viz_canvas.bind("<B1-Motion>", self.drag_window)
        self.viz_canvas.bind("<ButtonRelease-1>", self.end_window_drag)
        self.viz_canvas.bind("<Button-3>", self.start_window_resize)
        self.viz_canvas.bind("<B3-Motion>", self.resize_window)
        self.viz_canvas.bind("<ButtonRelease-3>", self.end_window_resize)

        controls_frame = Frame(self.window_mgmt_frame)
        controls_frame.pack(fill="x", padx=5, pady=5)

        auto_layout_frame = Frame(controls_frame)
        auto_layout_frame.pack(side=LEFT, padx=5)

        Button(auto_layout_frame, text="Auto 1:1", command=lambda: self.auto_layout("1:1")).pack(side=LEFT)
        Button(auto_layout_frame, text="Auto 16:9", command=lambda: self.auto_layout("16:9")).pack(side=LEFT)
        Button(auto_layout_frame, text="Auto 21:9", command=lambda: self.auto_layout("21:9")).pack(side=LEFT)
        Button(auto_layout_frame, text="Auto Fill", command=self.auto_fill).pack(side=LEFT, padx=2)

        borderless_frame = Frame(controls_frame)
        borderless_frame.pack(side=RIGHT, padx=5)

        self.borderless_var = BooleanVar(value=False)
        Checkbutton(borderless_frame, text="Borderless",
                        variable=self.borderless_var, command=self.toggle_borderless).pack(side=RIGHT)

        # Broadcast Frame
        broadcast_frame = LabelFrame(self.root, text="Key Broadcasting")
        broadcast_frame.pack(fill="x", expand=True, padx=10, pady=5)

        broadcast_mode_frame = Frame(broadcast_frame)
        broadcast_mode_frame.pack(fill="x", padx=5, pady=5)

        self.broadcast_all = Checkbutton(broadcast_mode_frame, text="Broadcast all keyboard input",
                                             variable=self.broadcast_all_keys, command=self.toggle_broadcast_mode)
        self.broadcast_all.pack(side=LEFT, padx=5)

        self.broadcast_select_keys = BooleanVar(value=True)
        self.broadcast_select = Checkbutton(broadcast_mode_frame, text="Broadcast select keys",
                                                variable=self.broadcast_select_keys, command=self.toggle_broadcast_mode)
        self.broadcast_select.pack(side=RIGHT, padx=5)

        self.keys_section_frame = Frame(broadcast_frame)
        self.keys_section_frame.pack(fill="x", padx=5, pady=5)

        Label(self.keys_section_frame, text="Keys to broadcast (comma separated):").pack(anchor="w", padx=5, pady=5)
        self.keys_entry = Entry(self.keys_section_frame)
        self.keys_entry.pack(fill="x", padx=5, pady=5)
        self.keys_entry.insert(0, self.keys)
        
        self.keys_entry.bind("<FocusOut>", self.on_keys_entry_focus_out)

        keys_btn_frame = Frame(self.keys_section_frame)
        keys_btn_frame.pack(fill="x", padx=5, pady=5)

        self.load_btn = Button(keys_btn_frame, text="Load Keys", command=self.load_keys_from_file)
        self.load_btn.pack(side=LEFT, padx=5)

        self.save_btn = Button(keys_btn_frame, text="Save Keys", command=self.save_keys)
        self.save_btn.pack(side=RIGHT, padx=5)

        self.broadcast_btn = Button(broadcast_frame, text="Start Broadcasting", command=self.toggle_broadcasting)
        self.broadcast_btn.pack(anchor="center", padx=5, pady=5)

        # Auto Focus Frame
        focus_frame = LabelFrame(self.root, text="Auto Focus")
        focus_frame.pack(fill="x", expand=True, padx=10, pady=10)
        
        # Make the frame slightly taller to accommodate the new checkbox
        focus_frame.configure(height=80)  # Increase the height
        
        focus_options_frame = Frame(focus_frame)
        focus_options_frame.pack(fill="x", padx=5, pady=5)

        # Configure a 3-column grid with equal weights
        focus_options_frame.columnconfigure(0, weight=1)
        focus_options_frame.columnconfigure(1, weight=1)
        focus_options_frame.columnconfigure(2, weight=1)

        # Left button
        self.focus_btn = Button(focus_options_frame, text="Enable Auto Focus", command=self.toggle_auto_focus)
        self.focus_btn.grid(row=0, column=0, padx=5, pady=5, sticky="w")

        # Center checkbox
        self.hide_taskbar_btn = Checkbutton(focus_options_frame, text="Hide taskbar on focus",
                                              variable=self.hide_taskbar_var)
        self.hide_taskbar_btn.grid(row=0, column=1, padx=5, pady=5)

        # Right checkbox
        self.pause_alt_tab_var = BooleanVar(value=True)
        self.pause_alt_tab_btn = Checkbutton(focus_options_frame, text="Pause on Alt+Tab",
                                               variable=self.pause_alt_tab_var, command=self.toggle_pause_alt_tab)
        self.pause_alt_tab_btn.grid(row=0, column=2, padx=5, pady=5, sticky="e")
        
        # Log Frame
        log_frame = LabelFrame(self.root, text="Log")
        log_frame.configure(height=100)
        log_frame.pack(fill="both", expand=True, padx=10, pady=10)

        log_options_frame = Frame(log_frame)
        log_options_frame.pack(fill="x", padx=5, pady=2, anchor="w")

        self.logging_checkbox = Checkbutton(log_options_frame, text="Enable Logging",
                                                variable=self.logging_enabled, command=self.toggle_logging)
        self.logging_checkbox.pack(side=LEFT, padx=5)

        self.log_text = Text(log_frame, height=6, width=40, state="disabled")
        self.log_text.pack(fill="both", expand=True, padx=5, pady=5)

        scrollbar = Scrollbar(self.log_text, command=self.log_text.yview)
        scrollbar.pack(side=RIGHT, fill=Y)
        self.log_text.config(yscrollcommand=scrollbar.set)

        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        snap_settings_frame = Frame(self.window_mgmt_frame)
        snap_settings_frame.pack(fill="x", padx=5, pady=2, before=self.viz_canvas)
        
        Checkbutton(snap_settings_frame, text="Grid Snap", variable=self.grid_snap_enabled).pack(side=LEFT, padx=2)
        Label(snap_settings_frame, text="Grid Size:").pack(side=LEFT, padx=20)
        Spinbox(snap_settings_frame, from_=5, to=50, width=3, textvariable=self.grid_snap_size).pack(side=LEFT, padx=2)
        #ttk.Checkbutton(snap_settings_frame, text="Snap to Windows", variable=self.window_snap_enabled).pack(side=LEFT, padx=5)
        #ttk.Checkbutton(snap_settings_frame, text="Snap to Corners", variable=self.corner_snap_enabled).pack(side=LEFT, padx=5)
        
    def sanitize_keys(self, keys_string):
        # Split input by commas
        raw_keys = [k.strip() for k in keys_string.split(',')]
        valid_keys = []
        
        # Define allowable keys
        allowed_single_chars = set("abcdefghijklmnopqrstuvwxyz0123456789")
        allowed_special_keys = {
            'space', 'tab', 'enter', 'shift', 'alt', 'ctrl',
            'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12'
        }
        
        # Validate each key
        for key in raw_keys:
            if (len(key) == 1 and key.lower() in allowed_single_chars) or key.lower() in allowed_special_keys:
                valid_keys.append(key.lower())
        
        return ','.join(valid_keys)
        
    def on_keys_entry_focus_out(self, event):
        # Sanitize the keys first
        sanitized_keys = self.sanitize_keys(self.keys_entry.get())
        self.keys_entry.delete(0, END)
        self.keys_entry.insert(0, sanitized_keys)
        self.keys = sanitized_keys
        
        if self.is_broadcasting and not self.broadcast_all_keys.get():
            # Restart broadcasting with sanitized keys
            self.is_broadcasting = False
            self.toggle_broadcasting()
            self.log("Broadcasting restarted with updated keys")
        
    def setup_window_management_frame(self):
        app_width = self.root.winfo_width()
        app_height = self.root.winfo_height()
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        aspect_ratio = screen_width / screen_height
        frame_width = app_width - 40
        frame_height = int(frame_width / aspect_ratio)
        self.window_mgmt_frame.config(width=frame_width, height=frame_height)
        self.viz_canvas.config(height=frame_height)
        self.viz_canvas.bind("<Button-1>", self.start_window_drag)
        self.viz_canvas.bind("<B1-Motion>", self.drag_window)
        self.viz_canvas.bind("<ButtonRelease-1>", self.end_window_drag)
        self.viz_canvas.bind("<Button-3>", self.start_window_resize)
        self.viz_canvas.bind("<B3-Motion>", self.resize_window)
        self.viz_canvas.bind("<ButtonRelease-3>", self.end_window_resize)
        self.viz_canvas.bind("<Button-1>", self.start_window_resize, add="+")
        self.viz_canvas.bind("<B1-Motion>", self.resize_window, add="+")
        self.viz_canvas.bind("<ButtonRelease-1>", self.end_window_resize, add="+")

    def update_window_visualization(self):
        self.viz_canvas.delete("all")
        self.window_rects = {}
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        canvas_width = self.viz_canvas.winfo_width()
        canvas_height = self.viz_canvas.winfo_height()

        self.screen_scale = min(canvas_width / screen_width, canvas_height / screen_height)

        self.viz_canvas.create_rectangle(
            0, 0,
            screen_width * self.screen_scale,
            screen_height * self.screen_scale,
            outline="white", width=2
        )

        target_windows = self.get_target_windows()
        colors = ["red", "green", "blue", "yellow", "cyan", "magenta", "orange", "purple", "brown", "pink"]

        # Sort windows by their top-left corner position (upper left to clockwise)
        target_windows.sort(key=lambda w: (w.top, w.left))

        for i, window in enumerate(target_windows):
            color = colors[i % len(colors)]
            x1 = window.left * self.screen_scale
            y1 = window.top * self.screen_scale
            x2 = window.right * self.screen_scale
            y2 = window.bottom * self.screen_scale
            rect_id = self.viz_canvas.create_rectangle(
                x1, y1, x2, y2,
                fill=color, outline="white", width=1,
                tags=f"window_{i}"
            )

            # Add window number in top-left corner
            self.viz_canvas.create_text(
                x1 + 10, y1 + 10,
                text=f"#{i+1}",
                fill="white",
                font=("Arial", 10, "bold"),
                tags=f"window_{i}"
            )

            # Add window title in center
            title = window.title if len(window.title) < 20 else window.title[:17] + "..."
            self.viz_canvas.create_text(
                (x1 + x2) / 2, (y1 + y2) / 2,
                text=title, fill="white", font=("Arial", 8),
                tags=f"window_{i}"
            )

            resize_handle = self.viz_canvas.create_polygon(
                x2, y2 - 10, x2 - 10, y2, x2, y2,
                fill="white", outline="black", width=1,
                tags=f"resize_{i}"
            )

            self.window_rects[rect_id] = {
                "window": window,
                "index": i,
                "original_geometry": (window.left, window.top, window.right, window.bottom),
                "resize_handle": resize_handle
            }

        if not target_windows:
            self.viz_canvas.create_text(
                canvas_width / 2, canvas_height / 2,
                text="No windows selected", fill="white", font=("Arial", 12)
            )

    def start_window_drag(self, event):
        closest = self.viz_canvas.find_closest(event.x, event.y)
        if closest and closest[0] in self.window_rects:
            self.dragging_window = {
                "id": closest[0],
                "start_x": event.x,
                "start_y": event.y,
                "original_coords": self.viz_canvas.coords(closest[0]),
                "canvas_width": self.viz_canvas.winfo_width(),
                "canvas_height": self.viz_canvas.winfo_height()
            }
            self.viz_canvas.itemconfig(closest[0], width=2)

            # Hide the name, number, and resize handle
            window_info = self.window_rects[closest[0]]
            for item in self.viz_canvas.find_withtag(f"window_{window_info['index']}"):
                if "text" in self.viz_canvas.type(item):
                    self.viz_canvas.itemconfig(item, state="hidden")

            # Hide the resize handle
            resize_handle = window_info.get("resize_handle")
            if resize_handle:
                self.viz_canvas.itemconfig(resize_handle, state="hidden")

    def drag_window(self, event):
        if not self.dragging_window:
            return

        dx = event.x - self.dragging_window["start_x"]
        dy = event.y - self.dragging_window["start_y"]
        orig = self.dragging_window["original_coords"]

        # Calculate new coordinates
        new_x1 = orig[0] + dx
        new_y1 = orig[1] + dy
        new_x2 = orig[2] + dx
        new_y2 = orig[3] + dy

        # Apply snapping if enabled
        if self.grid_snap_enabled.get():
            snap_size = self.grid_snap_size.get() * self.screen_scale
            # Snap to grid
            new_x1 = round(new_x1 / snap_size) * snap_size
            new_y1 = round(new_y1 / snap_size) * snap_size
            new_x2 = new_x1 + (orig[2] - orig[0])
            new_y2 = new_y1 + (orig[3] - orig[1])

        # Snap to corners if enabled
        if self.corner_snap_enabled.get():
            canvas_width = self.dragging_window["canvas_width"]
            canvas_height = self.dragging_window["canvas_height"]
            corner_snap_distance = 20 * self.screen_scale

            # Top-left corner
            if abs(new_x1) < corner_snap_distance and abs(new_y1) < corner_snap_distance:
                new_x1 = 0
                new_y1 = 0
                new_x2 = orig[2] - orig[0]
                new_y2 = orig[3] - orig[1]

            # Top-right corner
            if abs(new_x2 - canvas_width) < corner_snap_distance and abs(new_y1) < corner_snap_distance:
                new_x2 = canvas_width
                new_y1 = 0
                new_x1 = new_x2 - (orig[2] - orig[0])
                new_y2 = orig[3] - orig[1]

            # Bottom-left corner
            if abs(new_x1) < corner_snap_distance and abs(new_y2 - canvas_height) < corner_snap_distance:
                new_x1 = 0
                new_y2 = canvas_height
                new_x2 = orig[2] - orig[0]
                new_y1 = new_y2 - (orig[3] - orig[1])

            # Bottom-right corner
            if abs(new_x2 - canvas_width) < corner_snap_distance and abs(new_y2 - canvas_height) < corner_snap_distance:
                new_x2 = canvas_width
                new_y2 = canvas_height
                new_x1 = new_x2 - (orig[2] - orig[0])
                new_y1 = new_y2 - (orig[3] - orig[1])

        # Snap to other windows if enabled
        if self.window_snap_enabled.get():
            snap_distance = 10 * self.screen_scale
            current_id = self.dragging_window["id"]

            for rect_id, info in self.window_rects.items():
                if rect_id == current_id:
                    continue

                rect_coords = self.viz_canvas.coords(rect_id)
                rx1, ry1, rx2, ry2 = rect_coords

                # Snap left edge to other window's right edge
                if abs(new_x1 - rx2) < snap_distance:
                    new_x1 = rx2
                    new_x2 = new_x1 + (orig[2] - orig[0])

                # Snap right edge to other window's left edge
                if abs(new_x2 - rx1) < snap_distance:
                    new_x2 = rx1
                    new_x1 = new_x2 - (orig[2] - orig[0])

                # Snap top edge to other window's bottom edge
                if abs(new_y1 - ry2) < snap_distance:
                    new_y1 = ry2
                    new_y2 = new_y1 + (orig[3] - orig[1])

                # Snap bottom edge to other window's top edge
                if abs(new_y2 - ry1) < snap_distance:
                    new_y2 = ry1
                    new_y1 = new_y2 - (orig[3] - orig[1])

        # Update the window position
        self.viz_canvas.coords(self.dragging_window["id"], new_x1, new_y1, new_x2, new_y2)

        # Update any child elements
        window_info = self.window_rects[self.dragging_window["id"]]
        for item in self.viz_canvas.find_withtag(f"window_{window_info['index']}"):
            if item != self.dragging_window["id"]:
                self.viz_canvas.move(item, new_x1 - orig[0], new_y1 - orig[1])
            
    def end_window_drag(self, event):
        if not self.dragging_window:
            return
        rect_id = self.dragging_window["id"]
        window_info = self.window_rects[rect_id]
        window = window_info["window"]
        new_coords = self.viz_canvas.coords(rect_id)
        new_left = int(new_coords[0] / self.screen_scale)
        new_top = int(new_coords[1] / self.screen_scale)
        new_right = int(new_coords[2] / self.screen_scale)
        new_bottom = int(new_coords[3] / self.screen_scale)
        width = new_right - new_left
        height = new_bottom - new_top
        try:
            window.moveTo(new_left, new_top)
            window.resizeTo(width, height)
            self.log(f"Moved window '{window.title}' to ({new_left}, {new_top}) with size {width}x{height}")
        except Exception as e:
            self.log(f"Error moving window: {str(e)}")
        self.viz_canvas.itemconfig(rect_id, width=1)

        # Show the name, number, and resize handle
        for item in self.viz_canvas.find_withtag(f"window_{window_info['index']}"):
            if "text" in self.viz_canvas.type(item):
                self.viz_canvas.itemconfig(item, state="normal")

        # Show the resize handle
        resize_handle = window_info.get("resize_handle")
        if resize_handle:
            self.viz_canvas.itemconfig(resize_handle, state="normal")

        self.dragging_window = None
        self.update_window_visualization()

    def start_window_resize(self, event):
        closest = self.viz_canvas.find_closest(event.x, event.y)
        if not closest:  # Check if closest is empty
            return  # No item found, so do nothing

        item_id = closest[0]  # Get the item ID
        tags = self.viz_canvas.gettags(item_id)

        if not tags:  # Check if tags is empty
            return  # No tags, so do nothing

        if "resize" in tags[0]:
            try:
                index = int(tags[0].split("_")[1])
                rect_id = None
                for rid, info in self.window_rects.items():
                    if info["index"] == index:
                        rect_id = rid
                        break

                if rect_id:
                    self.resizing_window = {
                        "id": rect_id,
                        "start_x": event.x,
                        "start_y": event.y,
                        "original_coords": self.viz_canvas.coords(rect_id)
                    }
                    self.viz_canvas.itemconfig(rect_id, width=2)
            except (ValueError, IndexError) as e:
                print(f"Error processing resize tag: {e}")
        pass
        
    def resize_window(self, event):
        if not self.resizing_window:
            return
            
        dx = event.x - self.resizing_window["start_x"]
        dy = event.y - self.resizing_window["start_y"]
        orig = self.resizing_window["original_coords"]
        
        # Calculate new coordinates
        new_x1 = orig[0]
        new_y1 = orig[1]
        new_x2 = orig[2] + dx
        new_y2 = orig[3] + dy
        
        # Apply snapping if enabled
        if self.grid_snap_enabled.get():
            snap_size = self.grid_snap_size.get() * self.screen_scale
            # Snap to grid
            new_x2 = round(new_x2 / snap_size) * snap_size
            new_y2 = round(new_y2 / snap_size) * snap_size
        
        # Snap to corners if enabled
        if self.corner_snap_enabled.get():
            canvas_width = self.viz_canvas.winfo_width()
            canvas_height = self.viz_canvas.winfo_height()
            corner_snap_distance = 20 * self.screen_scale
            
            # Bottom-right corner
            if abs(new_x2 - canvas_width) < corner_snap_distance and abs(new_y2 - canvas_height) < corner_snap_distance:
                new_x2 = canvas_width
                new_y2 = canvas_height
        
        # Snap to other windows if enabled
        if self.window_snap_enabled.get():
            snap_distance = 10 * self.screen_scale
            current_id = self.resizing_window["id"]
            
            for rect_id, info in self.window_rects.items():
                if rect_id == current_id:
                    continue
                    
                rect_coords = self.viz_canvas.coords(rect_id)
                rx1, ry1, rx2, ry2 = rect_coords
                
                # Snap right edge to other window's left edge
                if abs(new_x2 - rx1) < snap_distance:
                    new_x2 = rx1
                
                # Snap bottom edge to other window's top edge
                if abs(new_y2 - ry1) < snap_distance:
                    new_y2 = ry1
        
        # Update the window size
        self.viz_canvas.coords(self.resizing_window["id"], new_x1, new_y1, new_x2, new_y2)
        
        # Update any child elements
        window_info = self.window_rects[self.resizing_window["id"]]
        
        # Update resize handle position
        resize_handle = None
        for item in self.viz_canvas.find_withtag(f"resize_{window_info['index']}"):
            resize_handle = item
            break
            
        if resize_handle:
            self.viz_canvas.coords(resize_handle, 
                new_x2, new_y2 - 10, 
                new_x2 - 10, new_y2, 
                new_x2, new_y2)
                
        # Update window text position
        for item in self.viz_canvas.find_withtag(f"window_{window_info['index']}"):
            if item != self.resizing_window["id"] and "text" in self.viz_canvas.type(item):
                self.viz_canvas.coords(item, (new_x1 + new_x2) / 2, (new_y1 + new_y2) / 2)

    def end_window_resize(self, event):
        if not self.resizing_window:
            return
        rect_id = self.resizing_window["id"]
        window_info = self.window_rects[rect_id]
        window = window_info["window"]
        new_coords = self.viz_canvas.coords(rect_id)
        new_left = int(new_coords[0] / self.screen_scale)
        new_top = int(new_coords[1] / self.screen_scale)
        new_right = int(new_coords[2] / self.screen_scale)
        new_bottom = int(new_coords[3] / self.screen_scale)
        width = new_right - new_left
        height = new_bottom - new_top
        try:
            window.moveTo(new_left, new_top)
            window.resizeTo(width, height)
        except Exception as e:
            print(f"Error resizing window: {str(e)}")  # Debug print
        self.viz_canvas.itemconfig(rect_id, width=1)
        self.resizing_window = None
        self.update_window_visualization()


    def toggle_borderless(self):
        target_windows = self.get_target_windows()
        borderless = self.borderless_var.get()
        for window in target_windows:
            try:
                hwnd = window._hWnd
                style = win32gui.GetWindowLong(hwnd, win32con.GWL_STYLE)
                if borderless:
                    new_style = style & ~(win32con.WS_CAPTION | win32con.WS_THICKFRAME)
                    win32gui.SetWindowLong(hwnd, win32con.GWL_STYLE, new_style)
                else:
                    new_style = style | win32con.WS_CAPTION | win32con.WS_THICKFRAME
                    win32gui.SetWindowLong(hwnd, win32con.GWL_STYLE, new_style)
                win32gui.SetWindowPos(hwnd, 0, 0, 0, 0, 0,
                   win32con.SWP_NOMOVE | win32con.SWP_NOSIZE |
                   win32con.SWP_NOZORDER | win32con.SWP_FRAMECHANGED)
            except Exception as e:
                self.log(f"Error toggling borderless mode: {str(e)}")
        mode = "borderless" if borderless else "normal"
        self.log(f"Set {len(target_windows)} windows to {mode} mode")

    def auto_layout(self, aspect_ratio):
        target_windows = self.get_target_windows()
        if not target_windows:
            self.log("No windows to layout")
            return
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        window_count = len(target_windows)
        if aspect_ratio == "1:1":
            cols = int(window_count ** 0.5)
            if cols * cols < window_count:
                cols += 1
            rows = (window_count + cols - 1) // cols
            cell_width = screen_width // cols
            cell_height = screen_height // rows
            cell_width = cell_height = min(cell_width, cell_height)
        elif aspect_ratio == "16:9":
            if window_count <= 3:
                rows = 1
                cols = window_count
            else:
                rows = 2
                cols = (window_count + 1) // 2
            
            # Calculate cell dimensions
            cell_width = screen_width // cols
            cell_height = screen_height // rows
            
            # Adjust to maintain 16:9 aspect ratio
            if cell_width / cell_height > 16/9:
                cell_width = int(cell_height * 16/9)
            else:
                cell_height = int(cell_width * 9/16)
            
            # Calculate padding to center windows
            padding_x = (screen_width - (cols * cell_width)) // 2
            padding_y = (screen_height - (rows * cell_height)) // 2
            
            # Position windows
            for i, window in enumerate(target_windows):
                row = i // cols
                col = i % cols
                x = padding_x + (col * cell_width)
                y = padding_y + (row * cell_height)
                try:
                    window.moveTo(x, y)
                    window.resizeTo(cell_width, cell_height)
                except Exception as e:
                    self.log(f"Error arranging window: {str(e)}")         
        elif aspect_ratio == "21:9":
            cols = int((window_count * 21 / 9) ** 0.5)
            if cols == 0:
                cols = 1
            rows = (window_count + cols - 1) // cols
            cell_width = screen_width // cols
            cell_height = int(cell_width * 9 / 21)
        else:
            self.log(f"Unknown aspect ratio: {aspect_ratio}")
            return
        for i, window in enumerate(target_windows):
            row = i // cols
            col = i % cols
            x = col * cell_width
            y = row * cell_height
            try:
                window.moveTo(x, y)
                window.resizeTo(cell_width, cell_height)
            except Exception as e:
                self.log(f"Error arranging window: {str(e)}")
        self.log(f"Arranged {window_count} windows in {rows}x{cols} grid ({aspect_ratio})")
        self.update_window_visualization()

    def auto_fill(self):
        target_windows = self.get_target_windows()
        if not target_windows:
            self.log("No windows to layout")
            return
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        window_count = len(target_windows)
        cols = int(window_count ** 0.5)
        if cols * cols < window_count:
            cols += 1
        rows = (window_count + cols - 1) // cols
        cell_width = screen_width // cols
        cell_height = screen_height // rows
        for i, window in enumerate(target_windows):
            row = i // cols
            col = i % cols
            x = col * cell_width
            y = row * cell_height
            try:
                window.moveTo(x, y)
                window.resizeTo(cell_width, cell_height)
            except Exception as e:
                self.log(f"Error arranging window: {str(e)}")
        self.log(f"Arranged {window_count} windows to fill the screen")
        self.update_window_visualization()

    def toggle_logging(self):
        if self.logging_enabled.get():
            self.log("Logging enabled")
        else:
            self.log("Logging disabled")
        self.save_profile_settings()

    def toggle_broadcast_mode(self):
        if self.broadcast_all_keys.get():
            self.keys_entry.config(state="disabled")
            self.load_btn.config(state="disabled")
            self.save_btn.config(state="disabled")
            self.broadcast_select.config(state="disabled")
            self.broadcast_select_keys.set(False)
            self.broadcast_btn.config(state="normal")  # Enable broadcast button
        elif self.broadcast_select_keys.get():
            self.broadcast_all_keys.set(False)
            self.broadcast_all.config(state="disabled")
            self.broadcast_btn.config(state="normal")  # Enable broadcast button
        else:
            self.keys_entry.config(state="normal")
            self.load_btn.config(state="normal")
            self.save_btn.config(state="normal")
            self.broadcast_select.config(state="normal")
            self.broadcast_all.config(state="normal")
            self.broadcast_btn.config(state="disabled")  # Disable broadcast button
            
        self.save_profile_settings()
        
    def load_keys_from_file(self):
        self.load_keys()
        self.keys_entry.delete(0, END)
        self.keys_entry.insert(0, self.keys)
        self.log(f"Keys loaded from {self.get_profile_keys_file(self.current_profile)}")

    def log(self, message):
        if not self.logging_enabled.get():
            return
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        self.log_text.config(state="normal")
        self.log_text.insert(END, f"{log_message}\n")
        self.log_text.see(END)
        self.log_text.config(state="disabled")
        with open(self.log_file, "a") as f:
            f.write(f"{log_message}\n")

    def on_window_selected(self, event):
        target_windows = self.get_target_windows()
        self.log(f"Found {len(target_windows)} matching windows for '{self.target_window_pattern.get()}'")
        self.save_profile_settings()
        self.update_window_visualization()

    def refresh_window_list(self, event=None):
        self.window_list = self.get_all_windows()
        self.window_combo['values'] = self.window_list
        self.log(f"Refreshed window list, found {len(self.window_list)} windows")
        if self.target_window_pattern.get():
            target_windows = self.get_target_windows()
            self.log(f"Found {len(target_windows)} matching windows for '{self.target_window_pattern.get()}'")
            self.update_window_visualization()

    def toggle_broadcasting(self):
        if not self.is_broadcasting:
            if not self.target_window_pattern.get():
                return
            self.is_broadcasting = True
            self.broadcast_btn.config(text="Stop Broadcasting")
            target_windows = self.get_target_windows()
            mode_text = "all keyboard input" if self.broadcast_all_keys.get() else "selected keys"
            self.log(f"Starting broadcast ({mode_text}) to {len(target_windows)} windows matching '{self.target_window_pattern.get()}'")
            self.broadcast_thread = threading.Thread(target=self.broadcast_keys)
            self.broadcast_thread.daemon = True
            self.broadcast_thread.start()
        else:
            self.is_broadcasting = False
            self.broadcast_btn.config(text="Start Broadcasting")
            self.log("Broadcasting stopped")
        self.save_profile_settings()

    def toggle_auto_focus(self):
        if not self.is_auto_focusing:
            if not self.target_window_pattern.get():
                return
            self.is_auto_focusing = True
            self.focus_btn.config(text="Disable Auto Focus")
            target_windows = self.get_target_windows()
            self.log(f"Auto focus enabled for {len(target_windows)} windows matching '{self.target_window_pattern.get()}'")
            self.focus_thread = threading.Thread(target=self.auto_focus)
            self.focus_thread.daemon = True
            self.focus_thread.start()
        else:
            self.is_auto_focusing = False
            self.focus_btn.config(text="Enable Auto Focus")
            self.log("Auto focus disabled")
        self.save_profile_settings()

    def toggle_pause_alt_tab(self):
        if self.pause_alt_tab_var.get():
            self.log("Pause on Alt+Tab enabled")
            self.alt_tab_pressed = True
        else:
            self.log("Pause on Alt+Tab disabled")
            self.alt_tab_pressed = False

    def get_target_windows(self):
        pattern = self.target_window_pattern.get()
        target_windows = []
        if pattern:
            for window in gw.getAllWindows():
                try:
                    if window.title and pattern == window.title:
                        target_windows.append(window)
                except:
                    pass
        return target_windows

    def broadcast_keys(self):
        if self.broadcast_all_keys.get():
            self.broadcast_all_keyboard()
        else:
            self.broadcast_selected_keys()

    def broadcast_selected_keys(self):
        prev_key_states = {}
        key_hold_times = {}
        key_repeat_delay = 0.5  # Initial delay before repeating in seconds
        key_repeat_rate = 0.03  # Repeat rate in seconds
        
        while self.is_broadcasting and self.running:
            keys = [k.strip() for k in self.sanitize_keys(self.keys_entry.get()).split(',')]
            current_time = time.time()
            
            # Initialize tracking for new keys
            for key in keys:
                if key not in prev_key_states:
                    prev_key_states[key] = False
                    key_hold_times[key] = 0
            
            try:
                target_windows = self.get_target_windows()
                active_window = gw.getActiveWindow()
                
                if target_windows and any(window == active_window for window in target_windows):
                    for key in keys:
                        current_state = keyboard.is_pressed(key)
                        
                        if current_state:  # Key is pressed
                            if not prev_key_states[key]:  # First press
                                for window in target_windows:
                                    if window != active_window:
                                        win32api.PostMessage(window._hWnd, self.WM_KEYDOWN, 
                                                           ord(key.upper()) if len(key) == 1 else self.get_vk_code(key), 0)
                                key_hold_times[key] = current_time
                            elif current_time - key_hold_times[key] > key_repeat_delay:
                                # After delay, send key repeatedly
                                for window in target_windows:
                                    if window != active_window:
                                        win32api.PostMessage(window._hWnd, self.WM_KEYDOWN, 
                                                           ord(key.upper()) if len(key) == 1 else self.get_vk_code(key), 0)
                                key_hold_times[key] += key_repeat_rate  # Schedule next repeat
                        
                        prev_key_states[key] = current_state
            except Exception as e:
                self.log(f"Error: {str(e)}")
            time.sleep(0.01)
    def broadcast_all_keyboard(self):
        all_keys = [
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
            'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            'space', 'tab', 'enter', 'shift', 'alt', 'ctrl',
            'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12',
        ]
        prev_key_states = {key: False for key in all_keys}
        key_hold_times = {key: 0 for key in all_keys}
        key_repeat_delay = 0.5  # Initial delay before repeating in seconds
        key_repeat_rate = 0.03  # Repeat rate in seconds
        
        while self.is_broadcasting and self.running:
            try:
                target_windows = self.get_target_windows()
                active_window = gw.getActiveWindow()
                current_time = time.time()
                
                if target_windows and any(window == active_window for window in target_windows):
                    for key in all_keys:
                        current_state = keyboard.is_pressed(key)
                        vk_code = self.get_vk_code(key)
                        
                        if current_state and vk_code:  # Key is pressed
                            if not prev_key_states[key]:  # First press
                                for window in target_windows:
                                    if window != active_window:
                                        win32api.PostMessage(window._hWnd, self.WM_KEYDOWN, vk_code, 0)
                                key_hold_times[key] = current_time
                            elif current_time - key_hold_times[key] > key_repeat_delay:
                                # After delay, send key repeatedly
                                for window in target_windows:
                                    if window != active_window:
                                        win32api.PostMessage(window._hWnd, self.WM_KEYDOWN, vk_code, 0)
                                key_hold_times[key] += key_repeat_rate  # Schedule next repeat
                        
                        prev_key_states[key] = current_state
            except Exception as e:
                self.log(f"Error: {str(e)}")
            time.sleep(0.01)
        
    def get_vk_code(self, key):
        special_keys = {
            'space': win32con.VK_SPACE,
            'tab': win32con.VK_TAB,
            'enter': win32con.VK_RETURN,
            'shift': win32con.VK_SHIFT,
            'alt': win32con.VK_MENU,
            'ctrl': win32con.VK_CONTROL,
            'f1': win32con.VK_F1,
            'f2': win32con.VK_F2,
            'f3': win32con.VK_F3,
            'f4': win32con.VK_F4,
            'f5': win32con.VK_F5,
            'f6': win32con.VK_F6,
            'f7': win32con.VK_F7,
            'f8': win32con.VK_F8,
            'f9': win32con.VK_F9,
            'f10': win32con.VK_F10,
            'f11': win32con.VK_F11,
            'f12': win32con.VK_F12,
        }
        
        if key in special_keys:
            return special_keys[key]
        elif len(key) == 1:
            return ord(key.upper())
        elif key.isdigit():
            return ord(key)
        return 0

    def is_window_at_top(self, window, x, y):
        hwnd = win32gui.WindowFromPoint((x, y))
        if hwnd:
            rect = win32gui.GetWindowRect(hwnd)
            try:
                if window._hWnd == hwnd:
                    return True
            except:
                pass
        return False

    def auto_focus(self):
        last_focused_window = None
        
        while self.is_auto_focusing and self.running:
            if self.is_auto_focusing_paused:
                time.sleep(0.1)
                continue
            try:
                mouse_x, mouse_y = pyautogui.position()
                target_windows = self.get_target_windows()
                current_window = gw.getActiveWindow()
                
                # Check if we're still focusing on a target window
                current_is_target = any(window == current_window for window in target_windows)
                
                # If we moved from a target window to a non-target window, show taskbar
                if last_focused_window and not current_is_target and self.hide_taskbar_var.get():
                    self.toggle_taskbar(hide=False)
                
                for window in target_windows:
                    if (window.left <= mouse_x <= window.right and
                        window.top <= mouse_y <= window.bottom):
                        if window != current_window and self.is_window_at_top(window, mouse_x, mouse_y):
                            hwnd = window._hWnd
                            foreground_hwnd = ctypes.windll.user32.GetForegroundWindow()
                            foreground_thread = win32process.GetWindowThreadProcessId(foreground_hwnd)[0]
                            current_thread = win32api.GetCurrentThreadId()
                            try:
                                ctypes.windll.user32.AttachThreadInput(current_thread, foreground_thread, True)
                                win32gui.ShowWindow(hwnd, win32con.SW_SHOWNORMAL)
                                win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, 0, 0, 0, 0, win32con.SWP_NOMOVE | win32con.SWP_NOSIZE)
                                win32gui.SetWindowPos(hwnd, win32con.HWND_NOTOPMOST, 0, 0, 0, 0, win32con.SWP_NOMOVE | win32con.SWP_NOSIZE)
                                ctypes.windll.user32.SetForegroundWindow(hwnd)
                                ctypes.windll.user32.AttachThreadInput(current_thread, foreground_thread, False)
                                if ctypes.windll.user32.GetForegroundWindow() == hwnd:
                                    self.log(f"Focus changed to: {window.title}")
                                    last_focused_window = window
                                    
                                    # Hide taskbar if the option is enabled
                                    if self.hide_taskbar_var.get():
                                        self.toggle_taskbar(hide=True)
                                    
                                    break
                            except Exception as e:
                                self.log(f"Error details: {type(e).__name__}: {str(e)}")
                                try:
                                    ctypes.windll.user32.AttachThreadInput(current_thread, foreground_thread, False)
                                except:
                                    pass
                                try:
                                    win32gui.SendMessage(hwnd, win32con.WM_SYSCOMMAND, win32con.SC_RESTORE, 0)
                                    win32gui.SendMessage(hwnd, win32con.WM_ACTIVATE, win32con.WA_ACTIVE, 0)
                                except:
                                    pass
                                break
            except Exception as e:
                self.log(f"Error: {type(e).__name__}: {str(e)}")
            time.sleep(0.05)
        
    def on_closing(self):
        # Show taskbar if it was hidden
        if self.taskbar_hidden:
            self.toggle_taskbar(hide=False)
            
        self.save_profile_settings()
        self.running = False
        self.is_broadcasting = False
        self.is_auto_focusing = False
        if self.broadcast_thread and self.broadcast_thread.is_alive():
            self.broadcast_thread.join(1)
        if self.focus_thread and self.focus_thread.is_alive():
            self.focus_thread.join(1)
        self.root.destroy()

if __name__ == "__main__":
    root = Tk()
    app = AutoKeyBroadcaster(root)
    root.mainloop()
